// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for PromiseState.
const (
	PENDING          PromiseState = "PENDING"
	REJECTED         PromiseState = "REJECTED"
	REJECTEDCANCELED PromiseState = "REJECTED_CANCELED"
	REJECTEDTIMEDOUT PromiseState = "REJECTED_TIMEDOUT"
	RESOLVED         PromiseState = "RESOLVED"
)

// CancelPromiseRequest defines model for CancelPromiseRequest.
type CancelPromiseRequest struct {
	Value *Value `json:"value,omitempty"`
}

// CreatePromiseRequest defines model for CreatePromiseRequest.
type CreatePromiseRequest struct {
	Id      *string `json:"id,omitempty"`
	Param   *Value  `json:"param,omitempty"`
	Timeout *int    `json:"timeout,omitempty"`
}

// Promise defines model for Promise.
type Promise struct {
	Id                        *string       `json:"id,omitempty"`
	IdempotencyKeyForComplete *string       `json:"idempotencyKeyForComplete,omitempty"`
	IdempotencyKeyForCreate   *string       `json:"idempotencyKeyForCreate,omitempty"`
	Param                     *Value        `json:"param,omitempty"`
	State                     *PromiseState `json:"state,omitempty"`
	Timeout                   *int          `json:"timeout,omitempty"`
	Value                     *Value        `json:"value,omitempty"`
}

// PromiseState defines model for Promise.State.
type PromiseState string

// RejectPromiseRequest defines model for RejectPromiseRequest.
type RejectPromiseRequest struct {
	Value *Value `json:"value,omitempty"`
}

// ResolvePromiseRequest defines model for ResolvePromiseRequest.
type ResolvePromiseRequest struct {
	Value *Value `json:"value,omitempty"`
}

// Value defines model for Value.
type Value struct {
	Data    *string            `json:"data,omitempty"`
	Headers *map[string]string `json:"headers,omitempty"`
}

// SearchPromisesParams defines parameters for SearchPromises.
type SearchPromisesParams struct {
	// Q Search query
	Q string `form:"q" json:"q"`

	// State State of promises
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// Limit Number of promises returned per page, max 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor Cursor for the next page of the query, overrides other query parameters
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// CancelPromiseJSONRequestBody defines body for CancelPromise for application/json ContentType.
type CancelPromiseJSONRequestBody = CancelPromiseRequest

// CreatePromiseJSONRequestBody defines body for CreatePromise for application/json ContentType.
type CreatePromiseJSONRequestBody = CreatePromiseRequest

// RejectPromiseJSONRequestBody defines body for RejectPromise for application/json ContentType.
type RejectPromiseJSONRequestBody = RejectPromiseRequest

// ResolvePromiseJSONRequestBody defines body for ResolvePromise for application/json ContentType.
type ResolvePromiseJSONRequestBody = ResolvePromiseRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SearchPromises request
	SearchPromises(ctx context.Context, params *SearchPromisesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPromise request
	GetPromise(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelPromiseWithBody request with any body
	CancelPromiseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelPromise(ctx context.Context, id string, body CancelPromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePromiseWithBody request with any body
	CreatePromiseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePromise(ctx context.Context, id string, body CreatePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RejectPromiseWithBody request with any body
	RejectPromiseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RejectPromise(ctx context.Context, id string, body RejectPromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolvePromiseWithBody request with any body
	ResolvePromiseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResolvePromise(ctx context.Context, id string, body ResolvePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SearchPromises(ctx context.Context, params *SearchPromisesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchPromisesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromise(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromiseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelPromiseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelPromiseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelPromise(ctx context.Context, id string, body CancelPromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelPromiseRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePromiseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePromiseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePromise(ctx context.Context, id string, body CreatePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePromiseRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectPromiseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectPromiseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectPromise(ctx context.Context, id string, body RejectPromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectPromiseRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolvePromiseWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolvePromiseRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolvePromise(ctx context.Context, id string, body ResolvePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolvePromiseRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSearchPromisesRequest generates requests for SearchPromises
func NewSearchPromisesRequest(server string, params *SearchPromisesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPromiseRequest generates requests for GetPromise
func NewGetPromiseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelPromiseRequest calls the generic CancelPromise builder with application/json body
func NewCancelPromiseRequest(server string, id string, body CancelPromiseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelPromiseRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCancelPromiseRequestWithBody generates requests for CancelPromise with any type of body
func NewCancelPromiseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatePromiseRequest calls the generic CreatePromise builder with application/json body
func NewCreatePromiseRequest(server string, id string, body CreatePromiseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePromiseRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreatePromiseRequestWithBody generates requests for CreatePromise with any type of body
func NewCreatePromiseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises/%s/create", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRejectPromiseRequest calls the generic RejectPromise builder with application/json body
func NewRejectPromiseRequest(server string, id string, body RejectPromiseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRejectPromiseRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRejectPromiseRequestWithBody generates requests for RejectPromise with any type of body
func NewRejectPromiseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises/%s/reject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResolvePromiseRequest calls the generic ResolvePromise builder with application/json body
func NewResolvePromiseRequest(server string, id string, body ResolvePromiseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResolvePromiseRequestWithBody(server, id, "application/json", bodyReader)
}

// NewResolvePromiseRequestWithBody generates requests for ResolvePromise with any type of body
func NewResolvePromiseRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises/%s/resolve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SearchPromisesWithResponse request
	SearchPromisesWithResponse(ctx context.Context, params *SearchPromisesParams, reqEditors ...RequestEditorFn) (*SearchPromisesResponse, error)

	// GetPromiseWithResponse request
	GetPromiseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPromiseResponse, error)

	// CancelPromiseWithBodyWithResponse request with any body
	CancelPromiseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelPromiseResponse, error)

	CancelPromiseWithResponse(ctx context.Context, id string, body CancelPromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelPromiseResponse, error)

	// CreatePromiseWithBodyWithResponse request with any body
	CreatePromiseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePromiseResponse, error)

	CreatePromiseWithResponse(ctx context.Context, id string, body CreatePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePromiseResponse, error)

	// RejectPromiseWithBodyWithResponse request with any body
	RejectPromiseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectPromiseResponse, error)

	RejectPromiseWithResponse(ctx context.Context, id string, body RejectPromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectPromiseResponse, error)

	// ResolvePromiseWithBodyWithResponse request with any body
	ResolvePromiseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolvePromiseResponse, error)

	ResolvePromiseWithResponse(ctx context.Context, id string, body ResolvePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*ResolvePromiseResponse, error)
}

type SearchPromisesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Promise
}

// Status returns HTTPResponse.Status
func (r SearchPromisesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchPromisesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPromiseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Promise
}

// Status returns HTTPResponse.Status
func (r GetPromiseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPromiseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelPromiseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Promise
	JSON201      *Promise
	JSON403      *Promise
}

// Status returns HTTPResponse.Status
func (r CancelPromiseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelPromiseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePromiseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Promise
	JSON201      *Promise
	JSON403      *Promise
}

// Status returns HTTPResponse.Status
func (r CreatePromiseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePromiseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RejectPromiseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Promise
	JSON201      *Promise
	JSON403      *Promise
}

// Status returns HTTPResponse.Status
func (r RejectPromiseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RejectPromiseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolvePromiseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Promise
	JSON201      *Promise
	JSON403      *Promise
}

// Status returns HTTPResponse.Status
func (r ResolvePromiseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolvePromiseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SearchPromisesWithResponse request returning *SearchPromisesResponse
func (c *ClientWithResponses) SearchPromisesWithResponse(ctx context.Context, params *SearchPromisesParams, reqEditors ...RequestEditorFn) (*SearchPromisesResponse, error) {
	rsp, err := c.SearchPromises(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchPromisesResponse(rsp)
}

// GetPromiseWithResponse request returning *GetPromiseResponse
func (c *ClientWithResponses) GetPromiseWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPromiseResponse, error) {
	rsp, err := c.GetPromise(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromiseResponse(rsp)
}

// CancelPromiseWithBodyWithResponse request with arbitrary body returning *CancelPromiseResponse
func (c *ClientWithResponses) CancelPromiseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelPromiseResponse, error) {
	rsp, err := c.CancelPromiseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelPromiseResponse(rsp)
}

func (c *ClientWithResponses) CancelPromiseWithResponse(ctx context.Context, id string, body CancelPromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelPromiseResponse, error) {
	rsp, err := c.CancelPromise(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelPromiseResponse(rsp)
}

// CreatePromiseWithBodyWithResponse request with arbitrary body returning *CreatePromiseResponse
func (c *ClientWithResponses) CreatePromiseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePromiseResponse, error) {
	rsp, err := c.CreatePromiseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePromiseResponse(rsp)
}

func (c *ClientWithResponses) CreatePromiseWithResponse(ctx context.Context, id string, body CreatePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePromiseResponse, error) {
	rsp, err := c.CreatePromise(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePromiseResponse(rsp)
}

// RejectPromiseWithBodyWithResponse request with arbitrary body returning *RejectPromiseResponse
func (c *ClientWithResponses) RejectPromiseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectPromiseResponse, error) {
	rsp, err := c.RejectPromiseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectPromiseResponse(rsp)
}

func (c *ClientWithResponses) RejectPromiseWithResponse(ctx context.Context, id string, body RejectPromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectPromiseResponse, error) {
	rsp, err := c.RejectPromise(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectPromiseResponse(rsp)
}

// ResolvePromiseWithBodyWithResponse request with arbitrary body returning *ResolvePromiseResponse
func (c *ClientWithResponses) ResolvePromiseWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolvePromiseResponse, error) {
	rsp, err := c.ResolvePromiseWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolvePromiseResponse(rsp)
}

func (c *ClientWithResponses) ResolvePromiseWithResponse(ctx context.Context, id string, body ResolvePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*ResolvePromiseResponse, error) {
	rsp, err := c.ResolvePromise(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolvePromiseResponse(rsp)
}

// ParseSearchPromisesResponse parses an HTTP response from a SearchPromisesWithResponse call
func ParseSearchPromisesResponse(rsp *http.Response) (*SearchPromisesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchPromisesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPromiseResponse parses an HTTP response from a GetPromiseWithResponse call
func ParseGetPromiseResponse(rsp *http.Response) (*GetPromiseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPromiseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelPromiseResponse parses an HTTP response from a CancelPromiseWithResponse call
func ParseCancelPromiseResponse(rsp *http.Response) (*CancelPromiseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelPromiseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreatePromiseResponse parses an HTTP response from a CreatePromiseWithResponse call
func ParseCreatePromiseResponse(rsp *http.Response) (*CreatePromiseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePromiseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseRejectPromiseResponse parses an HTTP response from a RejectPromiseWithResponse call
func ParseRejectPromiseResponse(rsp *http.Response) (*RejectPromiseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RejectPromiseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseResolvePromiseResponse parses an HTTP response from a ResolvePromiseWithResponse call
func ParseResolvePromiseResponse(rsp *http.Response) (*ResolvePromiseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResolvePromiseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}
